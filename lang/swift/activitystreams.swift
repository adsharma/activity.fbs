// automatically generated by the FlatBuffers compiler, do not modify
struct Date {
    var ts: UInt64
}

struct Duration {
    var duration: UInt64
}

struct Language {
    var code: String
}

struct URL {
    var url: String
}

struct RelativeLink {
    var link: String
}

struct MimeType {
    var encoding: String
}

struct Bool {
    var val: Bool
}

struct String {
    var val: String
}

struct IntransitiveActivity {
}

struct Activity {
    var actor: ObjectOrLink
    var instrument: ObjectOrLink
    var origin: ObjectOrLink
    var result: ObjectOrLink
    var target: ObjectOrLink
}

struct Object {
    var attachment: ObjectOrLink
    var attributedTo: ObjectOrLink
    var audience: ObjectOrLink
    var bcc: ObjectOrLink
    var bto: ObjectOrLink
    var cc: ObjectOrLink
    var context: ObjectOrLink
    var generator: ObjectOrLink
    var icon: ImageOrLink
    var image: ImageOrLink
    var inReplyTo: ObjectOrLink
    var location: ObjectOrLink
    var object: ObjectOrLink
    var preview: ObjectOrLink
    var replies: Collection
    var tag: ObjectOrLink
    var to: ObjectOrLink
    var url: URLOrLink
    var altitude: Float
    var content: String
    var name: String
    var duration: Duration
    var mediaType: MimeType
    var endTime: Date
    var published: Date
    var source_property: ObjectOrLink
    var startTime: Date
    var summary: String
    var updated: Date
    var likes: MaybeOrderedCollection
    var shares: MaybeOrderedCollection
}

struct Link {
    var attributedTo: ObjectOrLink
    var preview: ObjectOrLink
    var name: String
    var height: UInt
    var href: URL
    var hreflang: Language
    var mediaType: MimeType
    var rel: RelativeLink
    var summary: String
    var width: UInt
}

struct Collection {
    var current: PageOrLink
    var first: PageOrLink
    var last: PageOrLink
    var items: ObjectOrLink
    var totalItems: UInt
}

struct OrderedCollection {
    var orderedItems: ObjectOrLink
}

struct Question: IntransitiveActivity {
    var oneOf: ObjectOrLink
    var anyOf: ObjectOrLink
    var closed: Various
}

struct CollectionPage {
    var next: PageOrLink
    var prev: PageOrLink
    var partOf: CollectionOrLink
}

struct Place {
    var accuracy: Float
    var latitude: Float
    var longitude: Float
    var radius: Float
    var units: StringOrURL
}

struct Image {
    var height: UInt
    var width: UInt
}

struct OrderedCollectionPage {
    var startIndex: UInt
}

struct Relationship {
    var subject: ObjectOrLink
    var relationship: Object
}

struct Profile {
    var describes: Object
}

struct Tombstone {
    var formerType: ObjectOrString
    var deleted: Date
}

struct Application: Object {
    var inbox: OrderedCollection
    var outbox: OrderedCollection
    var following: MaybeOrderedCollection
    var followers: MaybeOrderedCollection
    var liked: MaybeOrderedCollection
    var streams: MaybeOrderedCollection
    var preferredUsername: String
}

struct Group: Object {
    var inbox: OrderedCollection
    var outbox: OrderedCollection
    var following: MaybeOrderedCollection
    var followers: MaybeOrderedCollection
    var liked: MaybeOrderedCollection
    var streams: MaybeOrderedCollection
    var preferredUsername: String
}

struct Organization: Object {
    var inbox: OrderedCollection
    var outbox: OrderedCollection
    var following: MaybeOrderedCollection
    var followers: MaybeOrderedCollection
    var liked: MaybeOrderedCollection
    var streams: MaybeOrderedCollection
    var preferredUsername: String
}

struct Person: Object {
    var inbox: OrderedCollection
    var outbox: OrderedCollection
    var following: MaybeOrderedCollection
    var followers: MaybeOrderedCollection
    var liked: MaybeOrderedCollection
    var streams: MaybeOrderedCollection
    var preferredUsername: String
}

struct Service: Object {
    var inbox: OrderedCollection
    var outbox: OrderedCollection
    var following: MaybeOrderedCollection
    var followers: MaybeOrderedCollection
    var liked: MaybeOrderedCollection
    var streams: MaybeOrderedCollection
    var preferredUsername: String
}

struct Accept: Activity {
}

struct TentativeAccept: Activity {
}

struct Add: Activity {
}

struct Arrive: Activity {
}

struct Create: Activity {
}

struct Delete: Activity {
}

struct Follow: Activity {
}

struct Ignore: Activity {
}

struct Join: Activity {
}

struct Leave: Activity {
}

struct Like: Activity {
}

struct Offer: Activity {
}

struct Invite: Activity {
}

struct Reject: Activity {
}

struct TentativeReject: Activity {
}

struct Remove: Activity {
}

struct Undo: Activity {
}

struct Update: Activity {
}

struct View: Activity {
}

struct Listen: Activity {
}

struct Read: Activity {
}

struct Move: Activity {
}

struct Travel: Activity {
}

struct Announce: Activity {
}

struct Block: Activity {
}

struct Flag: Activity {
}

struct Dislike: Activity {
}

struct Question: Activity {
}

enum PageOrLink {
    case CollectionPage(CollectionPage)
    case Link(Link)
}

enum ImageOrLink {
    case Image(Image)
    case Link(Link)
}

enum CollectionOrLink {
    case Link(Link)
    case Collection(Collection)
}

enum ObjectOrLink {
    case Link(Link)
    case Object(Object)
}

enum Various {
    case Object(Object)
    case Link(Link)
    case Date(Date)
    case Bool(Bool)
}

enum ObjectOrString {
    case Object(Object)
    case String(String)
}

enum MaybeOrderedCollection {
    case OrderedCollection(OrderedCollection)
    case Collection(Collection)
}

enum URLOrLink {
    case URL(URL)
    case Link(Link)
}

enum StringOrURL {
    case String(String)
    case URL(URL)
}

enum ActivityStream {
    case Accept(Accept)
    case TentativeAccept(TentativeAccept)
    case Add(Add)
    case Arrive(Arrive)
    case Create(Create)
    case Delete(Delete)
    case Follow(Follow)
    case Ignore(Ignore)
    case Join(Join)
    case Leave(Leave)
    case Like(Like)
    case Offer(Offer)
    case Invite(Invite)
    case Reject(Reject)
    case TentativeReject(TentativeReject)
    case Remove(Remove)
    case Undo(Undo)
    case Update(Update)
    case View(View)
    case Listen(Listen)
    case Read(Read)
    case Move(Move)
    case Travel(Travel)
    case Announce(Announce)
    case Block(Block)
    case Flag(Flag)
    case Dislike(Dislike)
    case Question(Question)
}

enum Actor {
    case Application(Application)
    case Group(Group)
    case Organization(Organization)
    case Person(Person)
    case Service(Service)
}
